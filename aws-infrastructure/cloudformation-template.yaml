AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway with Lambda functions for Splunk HEC integration'

Parameters:
  SplunkHecToken:
    Type: String
    Description: 'Splunk HTTP Event Collector Token'
    NoEcho: true
    
  SplunkHecUrl:
    Type: String
    Description: 'Splunk HEC URL (e.g., https://splunk.company.com:8088)'
    
  Environment:
    Type: String
    Default: 'prod'
    Description: 'Environment name'
    
  AllowedOrigin:
    Type: String
    Default: '*'
    Description: 'CORS allowed origin'
    
  S3Bucket:
    Type: String
    Description: 'S3 bucket containing Lambda deployment package'
    
  S3Key:
    Type: String
    Description: 'S3 key for Lambda deployment package'

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SplunkGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'

  # Lambda Function for Splunk HEC
  SplunkGatewayFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-splunk-gateway'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          SPLUNK_HEC_TOKEN: !Ref SplunkHecToken
          SPLUNK_HEC_URL: !Ref SplunkHecUrl
          ALLOWED_ORIGIN: !Ref AllowedOrigin
          ENVIRONMENT: !Ref Environment
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'API Gateway for Splunk HEC integration'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for telemetry
  TelemetryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: telemetry

  # API Gateway Method - POST /telemetry
  TelemetryPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref TelemetryResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplunkGatewayFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: 500

  # API Gateway Method - OPTIONS /telemetry (for CORS)
  TelemetryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref TelemetryResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SplunkGatewayFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SplunkGatewayFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/*/*'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TelemetryPostMethod
      - TelemetryOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}'
      RetentionInDays: 14

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'
      
  TelemetryEndpoint:
    Description: 'Telemetry endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/telemetry'
    Export:
      Name: !Sub '${AWS::StackName}-telemetry-endpoint'
      
  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt SplunkGatewayFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-lambda-arn'
